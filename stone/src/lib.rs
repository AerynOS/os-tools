// SPDX-FileCopyrightText: Copyright Â© 2020-2023 Serpent OS Developers
//
// SPDX-License-Identifier: MPL-2.0

pub mod header;
mod reader;
mod writer;

pub use self::header::Header;
pub use self::reader::{from_bytes, from_reader, ReadError};
pub use self::writer::{to_bytes, to_writer, WriteError};

// TODO: Add typed payload
pub struct Stone {
    pub header: Header,
    pub payload: Vec<u8>,
}

#[cfg(test)]
mod test {
    use super::*;

    /// Header for bash completion stone archive
    const BASH_TEST_STONE: [u8; 32] = [
        0x0, 0x6d, 0x6f, 0x73, 0x0, 0x4, 0x0, 0x0, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x3, 0x0, 0x0,
        0x4, 0x0, 0x0, 0x5, 0x0, 0x0, 0x6, 0x0, 0x0, 0x7, 0x1, 0x0, 0x0, 0x0, 0x1,
    ];

    /// Legacy manifest archive
    const TEST_MANIFEST: [u8; 32] = [
        0x0, 0x6d, 0x6f, 0x73, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x3, 0x0, 0x0,
        0x4, 0x0, 0x0, 0x5, 0x0, 0x0, 0x6, 0x0, 0x0, 0x7, 0x4, 0x0, 0x0, 0x0, 0x1,
    ];

    #[test]
    fn roundtrip() {
        let stone = from_bytes(&BASH_TEST_STONE).expect("valid stone");
        assert_eq!(stone.header.version(), header::Version::V1);

        let bytes = to_bytes(stone).expect("valid stone");
        assert_eq!(&bytes, &BASH_TEST_STONE);
    }
}
